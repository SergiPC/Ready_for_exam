#include "Point2D.h"
#include "DLinkedList.h"
#include "CString.h"
#include "DynArray.h"
#include "Rectangle.h"
#include "iostream"

#define TEST(a)	(a)? printf("Test" #a "SUCCES"): printf("Test" #a "FAILURE");

using namespace std;

int main()
{
	int a = 1;
	TEST(a == 1);
	TEST(a == 5);


	// EXAMEN RECUPERACIÓ PROGRAMACIÓ 2 (3 JULIOL 2015)

	// 1)
	// Fer una nova classe “Rectangle” templatitzada amb constructor(x,y,w,h), constructor
	// de copia, calcul de àrea i càlcul d’intersecció :

	Rectangle<int> r(10, 10, 40, 50);
	Rectangle<int> r2(r);

	TEST(r.position.x == 10);
	TEST(r2.position.y == 10);
	TEST(r2.getArea() == 2000);
	TEST(r2.intersects(r) == true);



	// 2)
	// Mètode classe cadena String::doubleVocals que dupliqui totes les vocals:

	CString s("Hola Mundo");

	TEST(s.doubleVocals() == 4);
	TEST(s == "Hoolaa Muundoo");



	// 4)
	// Mètode DynArray::PrefixList per inserir una llista enllaçada al principi:

	DLinkedList<int> list02;

	list02.addNode(1);
	list02.addNode(2);
	list02.addNode(3);
	list02.addNode(4);
	list02.addNode(5);
	list02.addNode(6);
	list02.addNode(7);

	DynArray<int> array(5);

	array.pushBack(100);
	array.pushBack(200);
	array.pushBack(300);
	array.pushBack(400);
	array.pushBack(500);

	array.prefixList(list02);

	TEST(array.count() == 12);
	TEST(array[0] == 1);
	TEST(array[1] == 2);
	TEST(array[2] == 3);
	TEST(array[3] == 4);
	TEST(array[4] == 5);
	TEST(array[5] == 6);
	TEST(array[6] == 7);
	TEST(array[7] == 100);
	TEST(array[8] == 200);
	TEST(array[9] == 300);
	TEST(array[10] == 400);
	TEST(array[11] == 500);

	// FINAL EXAMEN RECUPERACIÓ PROGRAMACIÓ 2 (3 JULIOL 2015)

	getchar();
}



/*




// 3)
// Mètode List::Flip de la llista enllaçada per girar-la l’ordre:

DLinkedList<int> list;

list.addNode(1);
list.addNode(2);
list.addNode(3);
list.addNode(4);
list.addNode(5);
list.addNode(6);
list.addNode(7);

list.flip();

TEST(list[0] == 7);
TEST(list[1] == 6);
TEST(list[2] == 5);
TEST(list[3] == 4);
TEST(list[4] == 3);
TEST(list[5] == 2);
TEST(list[6] == 1);



// FINAL EXAMEN RECUPERACIÓ PROGRAMACIÓ 2 (3 JULIOL 2015)


*/



















//cout << "A man chooses, a slave obeys!" << endl;

/*
int numbersOf;

DynArray<int> new_array01;
DynArray<int> new_array02;
DynArray<int> new_array03;


// Bubble normal --------------------------------------
for (int i = 0; i < 10000; ++i){

new_array01.pushBack(rand() % 10001);
}

numbersOf = new_array01.bubbleSort();
cout << numbersOf << endl;


// Bubble optimitzat ----------------------------------
for (int i = 0; i < 10000; ++i){

new_array02.pushBack(rand() % 10001);
}

numbersOf = new_array02.bubbleSortOptimized();
cout << numbersOf << endl;


// Combsort -------------------------------------------
for (int i = 0; i < 10000; ++i){

new_array03.pushBack(rand() % 10001);
}

numbersOf = new_array03.combsort();
cout << numbersOf << endl;

*/